---

- name: Clear platform variables
  ansible.builtin.set_fact:
    __platform_vars: {}

- name: Create list of all platform default files
  ansible.builtin.set_fact:
    var_list: "{{ lookup('fileglob', 'defaults/*', wantlist=True) | regex_replace(role_path + '/') }}"

- name: Load defaults/main.yml
  ansible.builtin.set_fact:
    __defaults_vars: "{{ lookup('template', 'defaults/main.yml', errors='ignore') | from_yaml }}"

- name: Load variables based on OS type
  ansible.builtin.set_fact:
    __platform_vars: "{{ __platform_vars | combine((lookup('template', var, errors='ignore') | from_yaml)) }}"
  loop:
    - "defaults/family-{{ ansible_os_family }}.yml"
    - "defaults/family-{{ ansible_os_family }}-{{ ansible_distribution_major_version }}.yml"
    - "defaults/{{ ansible_distribution }}.yml"
    - "defaults/{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
  loop_control:
    loop_var: var
  when: var in var_list

- name: Set variable if not already defined or value is the default  # noqa var-naming
  ansible.builtin.set_fact:
    "{{ var.key }}": "{{ var.value }}"
  when: vars[var.key] is undefined or (__defaults_vars[var.key] is defined and vars[var.key] == __defaults_vars[var.key])
  loop: "{{ __platform_vars | dict2items }}"
  loop_control:
    loop_var: var
    label: "{{ var.key }}={{ var.value }}"
